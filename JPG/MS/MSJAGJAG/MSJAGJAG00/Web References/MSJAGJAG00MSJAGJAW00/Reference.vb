'------------------------------------------------------------------------------
' <auto-generated>
'     このコードはツールによって生成されました。
'     ランタイム バージョン:4.0.30319.42000
'
'     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
'     コードが再生成されるときに損失したりします。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'このソース コードは Microsoft.VSDesigner、バージョン 4.0.30319.42000 によって自動生成されました。
'
Namespace MSJAGJAG00MSJAGJAW00
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="MSJAGJAW00Soap", [Namespace]:="http://tempuri.org/MSJAGJAW00/Service1")>  _
    Partial Public Class MSJAGJAW00
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private mSetExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private mSetGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private mCSVOperationCompleted As System.Threading.SendOrPostCallback
        
        Private mSetHANJIGYOSYAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private mSetJAHOKOKUOperationCompleted As System.Threading.SendOrPostCallback
        
        Private mSetAUTOTAIOUOperationCompleted As System.Threading.SendOrPostCallback
        
        Private mSetHANBAITENOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.MSJAGJAG00.My.MySettings.Default.MSJAGJAG00_MSJAGJAG00MSJAGJAW00_MSJAGJAW00
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event mSetExCompleted As mSetExCompletedEventHandler
        
        '''<remarks/>
        Public Event mSetGroupCompleted As mSetGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event mCSVCompleted As mCSVCompletedEventHandler
        
        '''<remarks/>
        Public Event mSetHANJIGYOSYACompleted As mSetHANJIGYOSYACompletedEventHandler
        
        '''<remarks/>
        Public Event mSetJAHOKOKUCompleted As mSetJAHOKOKUCompletedEventHandler
        
        '''<remarks/>
        Public Event mSetAUTOTAIOUCompleted As mSetAUTOTAIOUCompletedEventHandler
        
        '''<remarks/>
        Public Event mSetHANBAITENCompleted As mSetHANBAITENCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MSJAGJAW00/Service1/mSetEx", RequestNamespace:="http://tempuri.org/MSJAGJAW00/Service1", ResponseNamespace:="http://tempuri.org/MSJAGJAW00/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function mSetEx(ByVal pintMODE As Integer, ByVal pstrJAGKBN As String, ByVal pstrTARGET() As String, ByVal pstrKURACD() As String, ByVal pstrACBCD() As String, ByVal pstrGROUPCD() As String, ByVal pstrUSERCD_F() As String, ByVal pstrUSERCD_T() As String, ByVal pstrBIKO() As String, ByVal pstrINS_DATE() As String, ByVal pstrINS_USER() As String, ByVal pstrUPD_DATE() As String, ByVal pstrUPD_USER() As String, ByVal pstrUSERNM As String) As String
            Dim results() As Object = Me.Invoke("mSetEx", New Object() {pintMODE, pstrJAGKBN, pstrTARGET, pstrKURACD, pstrACBCD, pstrGROUPCD, pstrUSERCD_F, pstrUSERCD_T, pstrBIKO, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginmSetEx( _
                    ByVal pintMODE As Integer,  _
                    ByVal pstrJAGKBN As String,  _
                    ByVal pstrTARGET() As String,  _
                    ByVal pstrKURACD() As String,  _
                    ByVal pstrACBCD() As String,  _
                    ByVal pstrGROUPCD() As String,  _
                    ByVal pstrUSERCD_F() As String,  _
                    ByVal pstrUSERCD_T() As String,  _
                    ByVal pstrBIKO() As String,  _
                    ByVal pstrINS_DATE() As String,  _
                    ByVal pstrINS_USER() As String,  _
                    ByVal pstrUPD_DATE() As String,  _
                    ByVal pstrUPD_USER() As String,  _
                    ByVal pstrUSERNM As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("mSetEx", New Object() {pintMODE, pstrJAGKBN, pstrTARGET, pstrKURACD, pstrACBCD, pstrGROUPCD, pstrUSERCD_F, pstrUSERCD_T, pstrBIKO, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndmSetEx(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub mSetExAsync(ByVal pintMODE As Integer, ByVal pstrJAGKBN As String, ByVal pstrTARGET() As String, ByVal pstrKURACD() As String, ByVal pstrACBCD() As String, ByVal pstrGROUPCD() As String, ByVal pstrUSERCD_F() As String, ByVal pstrUSERCD_T() As String, ByVal pstrBIKO() As String, ByVal pstrINS_DATE() As String, ByVal pstrINS_USER() As String, ByVal pstrUPD_DATE() As String, ByVal pstrUPD_USER() As String, ByVal pstrUSERNM As String)
            Me.mSetExAsync(pintMODE, pstrJAGKBN, pstrTARGET, pstrKURACD, pstrACBCD, pstrGROUPCD, pstrUSERCD_F, pstrUSERCD_T, pstrBIKO, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub mSetExAsync(ByVal pintMODE As Integer, ByVal pstrJAGKBN As String, ByVal pstrTARGET() As String, ByVal pstrKURACD() As String, ByVal pstrACBCD() As String, ByVal pstrGROUPCD() As String, ByVal pstrUSERCD_F() As String, ByVal pstrUSERCD_T() As String, ByVal pstrBIKO() As String, ByVal pstrINS_DATE() As String, ByVal pstrINS_USER() As String, ByVal pstrUPD_DATE() As String, ByVal pstrUPD_USER() As String, ByVal pstrUSERNM As String, ByVal userState As Object)
            If (Me.mSetExOperationCompleted Is Nothing) Then
                Me.mSetExOperationCompleted = AddressOf Me.OnmSetExOperationCompleted
            End If
            Me.InvokeAsync("mSetEx", New Object() {pintMODE, pstrJAGKBN, pstrTARGET, pstrKURACD, pstrACBCD, pstrGROUPCD, pstrUSERCD_F, pstrUSERCD_T, pstrBIKO, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM}, Me.mSetExOperationCompleted, userState)
        End Sub
        
        Private Sub OnmSetExOperationCompleted(ByVal arg As Object)
            If (Not (Me.mSetExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent mSetExCompleted(Me, New mSetExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MSJAGJAW00/Service1/mSetGroup", RequestNamespace:="http://tempuri.org/MSJAGJAW00/Service1", ResponseNamespace:="http://tempuri.org/MSJAGJAW00/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function mSetGroup(ByRef cdb As CDB, ByVal pintMODE As Integer, ByVal pstrJAGKBN As String, ByVal pstrTARGET As String, ByVal pstrKURACD As String, ByVal pstrACBCD As String, ByVal pstrGROUPCD As String, ByVal pstrUSERCD_F As String, ByVal pstrUSERCD_T As String, ByVal pstrBIKO As String, ByVal pstrINS_DATE As String, ByVal pstrINS_USER As String, ByVal pstrUPD_DATE As String, ByVal pstrUPD_USER As String, ByVal pstrUSERNM As String) As String
            Dim results() As Object = Me.Invoke("mSetGroup", New Object() {cdb, pintMODE, pstrJAGKBN, pstrTARGET, pstrKURACD, pstrACBCD, pstrGROUPCD, pstrUSERCD_F, pstrUSERCD_T, pstrBIKO, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM})
            cdb = CType(results(1),CDB)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginmSetGroup( _
                    ByVal cdb As CDB,  _
                    ByVal pintMODE As Integer,  _
                    ByVal pstrJAGKBN As String,  _
                    ByVal pstrTARGET As String,  _
                    ByVal pstrKURACD As String,  _
                    ByVal pstrACBCD As String,  _
                    ByVal pstrGROUPCD As String,  _
                    ByVal pstrUSERCD_F As String,  _
                    ByVal pstrUSERCD_T As String,  _
                    ByVal pstrBIKO As String,  _
                    ByVal pstrINS_DATE As String,  _
                    ByVal pstrINS_USER As String,  _
                    ByVal pstrUPD_DATE As String,  _
                    ByVal pstrUPD_USER As String,  _
                    ByVal pstrUSERNM As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("mSetGroup", New Object() {cdb, pintMODE, pstrJAGKBN, pstrTARGET, pstrKURACD, pstrACBCD, pstrGROUPCD, pstrUSERCD_F, pstrUSERCD_T, pstrBIKO, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndmSetGroup(ByVal asyncResult As System.IAsyncResult, ByRef cdb As CDB) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            cdb = CType(results(1),CDB)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub mSetGroupAsync(ByVal cdb As CDB, ByVal pintMODE As Integer, ByVal pstrJAGKBN As String, ByVal pstrTARGET As String, ByVal pstrKURACD As String, ByVal pstrACBCD As String, ByVal pstrGROUPCD As String, ByVal pstrUSERCD_F As String, ByVal pstrUSERCD_T As String, ByVal pstrBIKO As String, ByVal pstrINS_DATE As String, ByVal pstrINS_USER As String, ByVal pstrUPD_DATE As String, ByVal pstrUPD_USER As String, ByVal pstrUSERNM As String)
            Me.mSetGroupAsync(cdb, pintMODE, pstrJAGKBN, pstrTARGET, pstrKURACD, pstrACBCD, pstrGROUPCD, pstrUSERCD_F, pstrUSERCD_T, pstrBIKO, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub mSetGroupAsync( _
                    ByVal cdb As CDB,  _
                    ByVal pintMODE As Integer,  _
                    ByVal pstrJAGKBN As String,  _
                    ByVal pstrTARGET As String,  _
                    ByVal pstrKURACD As String,  _
                    ByVal pstrACBCD As String,  _
                    ByVal pstrGROUPCD As String,  _
                    ByVal pstrUSERCD_F As String,  _
                    ByVal pstrUSERCD_T As String,  _
                    ByVal pstrBIKO As String,  _
                    ByVal pstrINS_DATE As String,  _
                    ByVal pstrINS_USER As String,  _
                    ByVal pstrUPD_DATE As String,  _
                    ByVal pstrUPD_USER As String,  _
                    ByVal pstrUSERNM As String,  _
                    ByVal userState As Object)
            If (Me.mSetGroupOperationCompleted Is Nothing) Then
                Me.mSetGroupOperationCompleted = AddressOf Me.OnmSetGroupOperationCompleted
            End If
            Me.InvokeAsync("mSetGroup", New Object() {cdb, pintMODE, pstrJAGKBN, pstrTARGET, pstrKURACD, pstrACBCD, pstrGROUPCD, pstrUSERCD_F, pstrUSERCD_T, pstrBIKO, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM}, Me.mSetGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnmSetGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.mSetGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent mSetGroupCompleted(Me, New mSetGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MSJAGJAW00/Service1/mCSV", RequestNamespace:="http://tempuri.org/MSJAGJAW00/Service1", ResponseNamespace:="http://tempuri.org/MSJAGJAW00/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function mCSV(ByVal pstrSessionID As String, ByVal pstrAUTHCENTERCD As String, ByVal pstrJAGKBN As String, ByVal pstrKURACD As String, ByVal pstrACBCD_F As String, ByVal pstrACBCD_T As String, ByVal pstrGROUPCD As String, ByVal pstrSYU_TOUROKU As Boolean, ByVal pstrSYU_MITOUROKU As Boolean) As String
            Dim results() As Object = Me.Invoke("mCSV", New Object() {pstrSessionID, pstrAUTHCENTERCD, pstrJAGKBN, pstrKURACD, pstrACBCD_F, pstrACBCD_T, pstrGROUPCD, pstrSYU_TOUROKU, pstrSYU_MITOUROKU})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginmCSV(ByVal pstrSessionID As String, ByVal pstrAUTHCENTERCD As String, ByVal pstrJAGKBN As String, ByVal pstrKURACD As String, ByVal pstrACBCD_F As String, ByVal pstrACBCD_T As String, ByVal pstrGROUPCD As String, ByVal pstrSYU_TOUROKU As Boolean, ByVal pstrSYU_MITOUROKU As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("mCSV", New Object() {pstrSessionID, pstrAUTHCENTERCD, pstrJAGKBN, pstrKURACD, pstrACBCD_F, pstrACBCD_T, pstrGROUPCD, pstrSYU_TOUROKU, pstrSYU_MITOUROKU}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndmCSV(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub mCSVAsync(ByVal pstrSessionID As String, ByVal pstrAUTHCENTERCD As String, ByVal pstrJAGKBN As String, ByVal pstrKURACD As String, ByVal pstrACBCD_F As String, ByVal pstrACBCD_T As String, ByVal pstrGROUPCD As String, ByVal pstrSYU_TOUROKU As Boolean, ByVal pstrSYU_MITOUROKU As Boolean)
            Me.mCSVAsync(pstrSessionID, pstrAUTHCENTERCD, pstrJAGKBN, pstrKURACD, pstrACBCD_F, pstrACBCD_T, pstrGROUPCD, pstrSYU_TOUROKU, pstrSYU_MITOUROKU, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub mCSVAsync(ByVal pstrSessionID As String, ByVal pstrAUTHCENTERCD As String, ByVal pstrJAGKBN As String, ByVal pstrKURACD As String, ByVal pstrACBCD_F As String, ByVal pstrACBCD_T As String, ByVal pstrGROUPCD As String, ByVal pstrSYU_TOUROKU As Boolean, ByVal pstrSYU_MITOUROKU As Boolean, ByVal userState As Object)
            If (Me.mCSVOperationCompleted Is Nothing) Then
                Me.mCSVOperationCompleted = AddressOf Me.OnmCSVOperationCompleted
            End If
            Me.InvokeAsync("mCSV", New Object() {pstrSessionID, pstrAUTHCENTERCD, pstrJAGKBN, pstrKURACD, pstrACBCD_F, pstrACBCD_T, pstrGROUPCD, pstrSYU_TOUROKU, pstrSYU_MITOUROKU}, Me.mCSVOperationCompleted, userState)
        End Sub
        
        Private Sub OnmCSVOperationCompleted(ByVal arg As Object)
            If (Not (Me.mCSVCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent mCSVCompleted(Me, New mCSVCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MSJAGJAW00/Service1/mSetHANJIGYOSYA", RequestNamespace:="http://tempuri.org/MSJAGJAW00/Service1", ResponseNamespace:="http://tempuri.org/MSJAGJAW00/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function mSetHANJIGYOSYA(ByVal pintMODE As Integer, ByVal pstrGROUPCD As String, ByVal pstrGROUPNM As String, ByVal pstrINS_DATE As String, ByVal pstrINS_USER As String, ByVal pstrUPD_DATE As String, ByVal pstrUPD_USER As String, ByVal pstrUSERNM As String) As String
            Dim results() As Object = Me.Invoke("mSetHANJIGYOSYA", New Object() {pintMODE, pstrGROUPCD, pstrGROUPNM, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginmSetHANJIGYOSYA(ByVal pintMODE As Integer, ByVal pstrGROUPCD As String, ByVal pstrGROUPNM As String, ByVal pstrINS_DATE As String, ByVal pstrINS_USER As String, ByVal pstrUPD_DATE As String, ByVal pstrUPD_USER As String, ByVal pstrUSERNM As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("mSetHANJIGYOSYA", New Object() {pintMODE, pstrGROUPCD, pstrGROUPNM, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndmSetHANJIGYOSYA(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub mSetHANJIGYOSYAAsync(ByVal pintMODE As Integer, ByVal pstrGROUPCD As String, ByVal pstrGROUPNM As String, ByVal pstrINS_DATE As String, ByVal pstrINS_USER As String, ByVal pstrUPD_DATE As String, ByVal pstrUPD_USER As String, ByVal pstrUSERNM As String)
            Me.mSetHANJIGYOSYAAsync(pintMODE, pstrGROUPCD, pstrGROUPNM, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub mSetHANJIGYOSYAAsync(ByVal pintMODE As Integer, ByVal pstrGROUPCD As String, ByVal pstrGROUPNM As String, ByVal pstrINS_DATE As String, ByVal pstrINS_USER As String, ByVal pstrUPD_DATE As String, ByVal pstrUPD_USER As String, ByVal pstrUSERNM As String, ByVal userState As Object)
            If (Me.mSetHANJIGYOSYAOperationCompleted Is Nothing) Then
                Me.mSetHANJIGYOSYAOperationCompleted = AddressOf Me.OnmSetHANJIGYOSYAOperationCompleted
            End If
            Me.InvokeAsync("mSetHANJIGYOSYA", New Object() {pintMODE, pstrGROUPCD, pstrGROUPNM, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM}, Me.mSetHANJIGYOSYAOperationCompleted, userState)
        End Sub
        
        Private Sub OnmSetHANJIGYOSYAOperationCompleted(ByVal arg As Object)
            If (Not (Me.mSetHANJIGYOSYACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent mSetHANJIGYOSYACompleted(Me, New mSetHANJIGYOSYACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MSJAGJAW00/Service1/mSetJAHOKOKU", RequestNamespace:="http://tempuri.org/MSJAGJAW00/Service1", ResponseNamespace:="http://tempuri.org/MSJAGJAW00/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function mSetJAHOKOKU(ByVal pintMODE As Integer, ByVal pstrGROUPCD As String, ByVal pstrGROUPNM As String, ByVal pstrINS_DATE As String, ByVal pstrINS_USER As String, ByVal pstrUPD_DATE As String, ByVal pstrUPD_USER As String, ByVal pstrUSERNM As String) As String
            Dim results() As Object = Me.Invoke("mSetJAHOKOKU", New Object() {pintMODE, pstrGROUPCD, pstrGROUPNM, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginmSetJAHOKOKU(ByVal pintMODE As Integer, ByVal pstrGROUPCD As String, ByVal pstrGROUPNM As String, ByVal pstrINS_DATE As String, ByVal pstrINS_USER As String, ByVal pstrUPD_DATE As String, ByVal pstrUPD_USER As String, ByVal pstrUSERNM As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("mSetJAHOKOKU", New Object() {pintMODE, pstrGROUPCD, pstrGROUPNM, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndmSetJAHOKOKU(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub mSetJAHOKOKUAsync(ByVal pintMODE As Integer, ByVal pstrGROUPCD As String, ByVal pstrGROUPNM As String, ByVal pstrINS_DATE As String, ByVal pstrINS_USER As String, ByVal pstrUPD_DATE As String, ByVal pstrUPD_USER As String, ByVal pstrUSERNM As String)
            Me.mSetJAHOKOKUAsync(pintMODE, pstrGROUPCD, pstrGROUPNM, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub mSetJAHOKOKUAsync(ByVal pintMODE As Integer, ByVal pstrGROUPCD As String, ByVal pstrGROUPNM As String, ByVal pstrINS_DATE As String, ByVal pstrINS_USER As String, ByVal pstrUPD_DATE As String, ByVal pstrUPD_USER As String, ByVal pstrUSERNM As String, ByVal userState As Object)
            If (Me.mSetJAHOKOKUOperationCompleted Is Nothing) Then
                Me.mSetJAHOKOKUOperationCompleted = AddressOf Me.OnmSetJAHOKOKUOperationCompleted
            End If
            Me.InvokeAsync("mSetJAHOKOKU", New Object() {pintMODE, pstrGROUPCD, pstrGROUPNM, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM}, Me.mSetJAHOKOKUOperationCompleted, userState)
        End Sub
        
        Private Sub OnmSetJAHOKOKUOperationCompleted(ByVal arg As Object)
            If (Not (Me.mSetJAHOKOKUCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent mSetJAHOKOKUCompleted(Me, New mSetJAHOKOKUCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MSJAGJAW00/Service1/mSetAUTOTAIOU", RequestNamespace:="http://tempuri.org/MSJAGJAW00/Service1", ResponseNamespace:="http://tempuri.org/MSJAGJAW00/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function mSetAUTOTAIOU(ByVal pintMODE As Integer, ByVal pstrGROUPCD As String, ByVal pstrGROUPNM As String, ByVal pstrINS_DATE As String, ByVal pstrINS_USER As String, ByVal pstrUPD_DATE As String, ByVal pstrUPD_USER As String, ByVal pstrUSERNM As String) As String
            Dim results() As Object = Me.Invoke("mSetAUTOTAIOU", New Object() {pintMODE, pstrGROUPCD, pstrGROUPNM, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginmSetAUTOTAIOU(ByVal pintMODE As Integer, ByVal pstrGROUPCD As String, ByVal pstrGROUPNM As String, ByVal pstrINS_DATE As String, ByVal pstrINS_USER As String, ByVal pstrUPD_DATE As String, ByVal pstrUPD_USER As String, ByVal pstrUSERNM As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("mSetAUTOTAIOU", New Object() {pintMODE, pstrGROUPCD, pstrGROUPNM, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndmSetAUTOTAIOU(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub mSetAUTOTAIOUAsync(ByVal pintMODE As Integer, ByVal pstrGROUPCD As String, ByVal pstrGROUPNM As String, ByVal pstrINS_DATE As String, ByVal pstrINS_USER As String, ByVal pstrUPD_DATE As String, ByVal pstrUPD_USER As String, ByVal pstrUSERNM As String)
            Me.mSetAUTOTAIOUAsync(pintMODE, pstrGROUPCD, pstrGROUPNM, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub mSetAUTOTAIOUAsync(ByVal pintMODE As Integer, ByVal pstrGROUPCD As String, ByVal pstrGROUPNM As String, ByVal pstrINS_DATE As String, ByVal pstrINS_USER As String, ByVal pstrUPD_DATE As String, ByVal pstrUPD_USER As String, ByVal pstrUSERNM As String, ByVal userState As Object)
            If (Me.mSetAUTOTAIOUOperationCompleted Is Nothing) Then
                Me.mSetAUTOTAIOUOperationCompleted = AddressOf Me.OnmSetAUTOTAIOUOperationCompleted
            End If
            Me.InvokeAsync("mSetAUTOTAIOU", New Object() {pintMODE, pstrGROUPCD, pstrGROUPNM, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM}, Me.mSetAUTOTAIOUOperationCompleted, userState)
        End Sub
        
        Private Sub OnmSetAUTOTAIOUOperationCompleted(ByVal arg As Object)
            If (Not (Me.mSetAUTOTAIOUCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent mSetAUTOTAIOUCompleted(Me, New mSetAUTOTAIOUCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MSJAGJAW00/Service1/mSetHANBAITEN", RequestNamespace:="http://tempuri.org/MSJAGJAW00/Service1", ResponseNamespace:="http://tempuri.org/MSJAGJAW00/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function mSetHANBAITEN(ByVal pintMODE As Integer, ByVal pstrGROUPCD As String, ByVal pstrGROUPNM As String, ByVal pstrINS_DATE As String, ByVal pstrINS_USER As String, ByVal pstrUPD_DATE As String, ByVal pstrUPD_USER As String, ByVal pstrUSERNM As String) As String
            Dim results() As Object = Me.Invoke("mSetHANBAITEN", New Object() {pintMODE, pstrGROUPCD, pstrGROUPNM, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginmSetHANBAITEN(ByVal pintMODE As Integer, ByVal pstrGROUPCD As String, ByVal pstrGROUPNM As String, ByVal pstrINS_DATE As String, ByVal pstrINS_USER As String, ByVal pstrUPD_DATE As String, ByVal pstrUPD_USER As String, ByVal pstrUSERNM As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("mSetHANBAITEN", New Object() {pintMODE, pstrGROUPCD, pstrGROUPNM, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndmSetHANBAITEN(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub mSetHANBAITENAsync(ByVal pintMODE As Integer, ByVal pstrGROUPCD As String, ByVal pstrGROUPNM As String, ByVal pstrINS_DATE As String, ByVal pstrINS_USER As String, ByVal pstrUPD_DATE As String, ByVal pstrUPD_USER As String, ByVal pstrUSERNM As String)
            Me.mSetHANBAITENAsync(pintMODE, pstrGROUPCD, pstrGROUPNM, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub mSetHANBAITENAsync(ByVal pintMODE As Integer, ByVal pstrGROUPCD As String, ByVal pstrGROUPNM As String, ByVal pstrINS_DATE As String, ByVal pstrINS_USER As String, ByVal pstrUPD_DATE As String, ByVal pstrUPD_USER As String, ByVal pstrUSERNM As String, ByVal userState As Object)
            If (Me.mSetHANBAITENOperationCompleted Is Nothing) Then
                Me.mSetHANBAITENOperationCompleted = AddressOf Me.OnmSetHANBAITENOperationCompleted
            End If
            Me.InvokeAsync("mSetHANBAITEN", New Object() {pintMODE, pstrGROUPCD, pstrGROUPNM, pstrINS_DATE, pstrINS_USER, pstrUPD_DATE, pstrUPD_USER, pstrUSERNM}, Me.mSetHANBAITENOperationCompleted, userState)
        End Sub
        
        Private Sub OnmSetHANBAITENOperationCompleted(ByVal arg As Object)
            If (Not (Me.mSetHANBAITENCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent mSetHANBAITENCompleted(Me, New mSetHANBAITENCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/MSJAGJAW00/Service1")>  _
    Partial Public Class CDB
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub mSetExCompletedEventHandler(ByVal sender As Object, ByVal e As mSetExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class mSetExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub mSetGroupCompletedEventHandler(ByVal sender As Object, ByVal e As mSetGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class mSetGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cdb() As CDB
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),CDB)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub mCSVCompletedEventHandler(ByVal sender As Object, ByVal e As mCSVCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class mCSVCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub mSetHANJIGYOSYACompletedEventHandler(ByVal sender As Object, ByVal e As mSetHANJIGYOSYACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class mSetHANJIGYOSYACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub mSetJAHOKOKUCompletedEventHandler(ByVal sender As Object, ByVal e As mSetJAHOKOKUCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class mSetJAHOKOKUCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub mSetAUTOTAIOUCompletedEventHandler(ByVal sender As Object, ByVal e As mSetAUTOTAIOUCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class mSetAUTOTAIOUCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub mSetHANBAITENCompletedEventHandler(ByVal sender As Object, ByVal e As mSetHANBAITENCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class mSetHANBAITENCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
